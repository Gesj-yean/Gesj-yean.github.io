{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{491:function(t,a,e){\"use strict\";e.r(a);var s=e(56),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"给前端开发者的-14-个-javascript-代码优化建议\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#给前端开发者的-14-个-javascript-代码优化建议\"}},[t._v(\"#\")]),t._v(\" 给前端开发者的 14 个 JavaScript 代码优化建议\")]),t._v(\" \"),e(\"blockquote\",[e(\"ul\",[e(\"li\",[t._v(\"原文地址：\"),e(\"a\",{attrs:{href:\"https://blog.bitsrc.io/14-javascript-code-optimization-tips-for-front-end-developers-a44763d3a0da\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"14 JavaScript Code Optimization Tips for Front-End Developers\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"li\",[t._v(\"原文作者：\"),e(\"a\",{attrs:{href:\"https://medium.com/@mahdhirezvi\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Mahdhi Rezvi\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"li\",[t._v(\"译文出自：\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"掘金翻译计划\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"li\",[t._v(\"本文永久链接：\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner/blob/master/article/2020/14-javascript-code-optimization-tips-for-front-end-developers.md\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://github.com/xitu/gold-miner/blob/master/article/2020/14-javascript-code-optimization-tips-for-front-end-developers.md\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"li\",[t._v(\"译者：(Gesj-yean)[https://github.com/Gesj-yean]\")]),t._v(\" \"),e(\"li\",[t._v(\"校对者：(plusmultiply0)[https://github.com/plusmultiply0] (rachelcdev)[https://github.com/rachelcdev]\")])])]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn-images-1.medium.com/max/2560/1*MgoAGKBmwDGomYOe4hspxw.jpeg\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"JavaScript 已经成为当下最流行的编程语言之一。根据 \"),e(\"a\",{attrs:{href:\"https://w3techs.com/technologies/details/cp-javascript\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"W3Tech\"),e(\"OutboundLink\")],1),t._v(\"，全世界几乎 96% 的网站都在使用它。关于网站，你需要知道的最关键的一点是，你无法控制访问你网站的用户的硬件设备规格。访问你的网站的终端用户也许使用了高端或低端的设备，用着好的或差的网络连接。这意味着你必须确保你的网站是尽可能优化的，你能够满足任何用户的要求。\")]),t._v(\" \"),e(\"p\",[t._v(\"这里有一些技巧，可以帮助你更好地优化 JavaScript 代码，从而提高性能。\")]),t._v(\" \"),e(\"p\",[t._v(\"顺便提一下，为了共享和复用 JS 组件，需要在高质量代码（需要花时间）和合理交付时间之间保持正确的平衡。你可以使用流行的工具例如 \"),e(\"a\",{attrs:{href:\"https://bit.dev\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"strong\",[t._v(\"Bit\")]),e(\"OutboundLink\")],1),t._v(\" (\"),e(\"a\",{attrs:{href:\"https://github.com/teambit/bit\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Github\"),e(\"OutboundLink\")],1),t._v(\")，去共享组件（vanilla JS, TS, React, Vue 等）到 Bit 的 \"),e(\"a\",{attrs:{href:\"https://bit.dev\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"component hub\"),e(\"OutboundLink\")],1),t._v(\"，而不浪费太多时间。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_1-删除不使用的代码和功能\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-删除不使用的代码和功能\"}},[t._v(\"#\")]),t._v(\" 1. 删除不使用的代码和功能\")]),t._v(\" \"),e(\"p\",[t._v(\"程序包含越多的代码，给客户端传递的数据就越多。浏览器也需要更多的时间去解析和编译代码。\")]),t._v(\" \"),e(\"p\",[t._v(\"有时，代码里也许会包含完全未使用到的功能，最好只将这些额外的代码保留在开发环境中，并且不要把它们留到生产环境中，因为无用的代码可能会增加客户端浏览器的负担。\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"经常问自己那个函数、特性或代码是否是必需的。\")])]),t._v(\" \"),e(\"p\",[t._v(\"你可以手动的删掉无用的代码，也可以用工具 \"),e(\"a\",{attrs:{href:\"https://github.com/mishoo/UglifyJS#compressor-options\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Uglify\"),e(\"OutboundLink\")],1),t._v(\" 或 \"),e(\"a\",{attrs:{href:\"https://developers.google.com/closure/compiler/docs/api-tutorial3\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"谷歌开发的 Closure Compiler\"),e(\"OutboundLink\")],1),t._v(\" 帮你删。你甚至可以使用一种叫做 tree shaking 的技术来删除程序中未使用的代码。例如打包工具 Webpack 就提供了它。你可以在 \"),e(\"a\",{attrs:{href:\"https://medium.com/@bluepnume/javascript-tree-shaking-like-a-pro-7bf96e139eb7\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"这里\"),e(\"OutboundLink\")],1),t._v(\" 了解更多关于 tree shaking 信息。还有，如果你想删掉未使用的 npm 包，你可以输入命令 \"),e(\"code\",[t._v(\"npm prune\")]),t._v(\" 。阅读 \"),e(\"a\",{attrs:{href:\"https://docs.npmjs.com/cli-commands/prune.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"NPM 文档\"),e(\"OutboundLink\")],1),t._v(\" 了解更多。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_2-尽可能缓存\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-尽可能缓存\"}},[t._v(\"#\")]),t._v(\" 2. 尽可能缓存\")]),t._v(\" \"),e(\"p\",[t._v(\"缓存通过减少等待时间和网络请求提高了网站的速度和性能，因此减少了展示资源的时间。可以借助于 \"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Cache\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"缓存 API\"),e(\"OutboundLink\")],1),t._v(\" 或 \"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"HTTP 缓存\"),e(\"OutboundLink\")],1),t._v(\" 实现它。你也许好奇当内容改变时发生了什么。上述缓存机制能够在满足某些条件（如发布新内容）时处理和重新生成缓存。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_3-避免内存泄漏\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-避免内存泄漏\"}},[t._v(\"#\")]),t._v(\" 3. 避免内存泄漏\")]),t._v(\" \"),e(\"p\",[t._v(\"作为一种高级语言，JS 负责几个低级别的管理，比如内存管理。对于大多数编程语言来说，垃圾回收是一个常见的过程。通俗地说，垃圾回收就是简单地收集和释放，那些已经分配给对象，但目前又不被程序任一部分使用的内存。在像 C 这样的编程语言中，开发者必须使用 \"),e(\"code\",[t._v(\"malloc()\")]),t._v(\" 和 \"),e(\"code\",[t._v(\"dealloc()\")]),t._v(\" 函数来处理内存分配和回收。\")]),t._v(\" \"),e(\"p\",[t._v(\"尽管垃圾回收是 JavaScript 自动执行的，但在某些情况下，它可能并不完美。在 JavaScript ES6 中，Map 和 Set 与它们的“weaker”兄弟元素一起被引入。“weaker”对应着 WeakMap 和 WeakSet，持有的是每个键对象的“弱引用”。它们允许对未引用的值进行垃圾收集，从而防止内存泄漏。了解更多关于 \"),e(\"a\",{attrs:{href:\"https://blog.bitsrc.io/downloading-weakmaps-in-javascript-6e323d9eec81\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"WeakMaps\"),e(\"OutboundLink\")],1),t._v(\" 的信息。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_4-尽早跳出循环-try-to-break-out-of-loops-early\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-尽早跳出循环-try-to-break-out-of-loops-early\"}},[t._v(\"#\")]),t._v(\" 4. 尽早跳出循环 Try to Break Out of Loops Early\")]),t._v(\" \"),e(\"p\",[t._v(\"执行循环在代码量大的循环中肯定会消耗大量宝贵的时间，这就是为什么要尽早打破循环的原因。你可以使用 \"),e(\"code\",[t._v(\"break\")]),t._v(\" 关键字和\"),e(\"code\",[t._v(\"continue\")]),t._v(\" 关键字跳出循环。编写最有效的代码是开发者们的责任。\")]),t._v(\" \"),e(\"p\",[t._v(\"在下面的例子中，如果你不在循环中使用 \"),e(\"code\",[t._v(\"break\")]),t._v(\" ，你的代码将运行循环 1000000000 次，显然是超出负荷的。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" arr \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Array\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1000000000\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"fill\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'----'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\narr\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"970\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'found'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" i \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" arr\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"arr\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'found'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        console\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Found\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"break\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),e(\"p\",[t._v(\"在下面的例子中，当不满足条件时如果你不使用 \"),e(\"code\",[t._v(\"continue\")]),t._v(\"，那么将执行函数 1000000000 次。而我们只处理了位于偶数位置的数组元素，就将循环执行减少了近一半。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" arr \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Array\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1000000000\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"fill\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'----'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\narr\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"970\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'found'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" i \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" arr\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"%\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!=\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"continue\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"process\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"arr\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),e(\"p\",[t._v(\"你可以在 \"),e(\"a\",{attrs:{href:\"https://www.oreilly.com/library/view/high-performance-javascript/9781449382308/ch04.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"这里\"),e(\"OutboundLink\")],1),t._v(\" 了解更多关于循环和性能。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_5-最小化变量的计算次数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-最小化变量的计算次数\"}},[t._v(\"#\")]),t._v(\" 5. 最小化变量的计算次数\")]),t._v(\" \"),e(\"p\",[t._v(\"要减少计算变量的次数，可以使用闭包。JavaScript 中的闭包允许你从内部函数访问外部函数作用域。每次创建一个函数时都会创建闭包——\"),e(\"strong\",[t._v(\"但不调用\")]),t._v(\"。内部函数可以访问外部作用域的变量，即使外部函数已经调用结束。\")]),t._v(\" \"),e(\"p\",[t._v(\"让我们看两个例子，看看这是怎么回事。这些例子的灵感来自 Bret 的博客。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"findCustomerCity\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[t._v(\"name\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" texasCustomers \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'John'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Ludwig'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Kate'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" californiaCustomers \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Wade'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Lucie'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Kylie'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" texasCustomers\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"includes\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Texas'\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \\n    californiaCustomers\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"includes\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'California'\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Unknown'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),e(\"p\",[t._v(\"如果我们多次调用上述函数，每次都会创建一个新对象。对于每个调用，不会将内存重新分配给变量 \"),e(\"code\",[t._v(\"texasCustometrs\")]),t._v(\" 和 \"),e(\"code\",[t._v(\"californiaCustomers\")]),t._v(\"。\")]),t._v(\" \"),e(\"p\",[t._v(\"通过使用带有闭包的解决方案，我们只能实例化变量一次。让我们看看下面的例子。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"findCustomerCity\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" texasCustomers \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'John'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Ludwig'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Kate'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" californiaCustomers \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Wade'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Lucie'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Kylie'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[t._v(\"name\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=>\")]),t._v(\" texasCustomers\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"includes\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Texas'\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \\n    californiaCustomers\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"includes\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'California'\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Unknown'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" cityOfCustomer \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"findCustomerCity\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"cityOfCustomer\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'John'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//Texas\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"cityOfCustomer\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Wade'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//California\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"cityOfCustomer\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'Max'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//Unknown\")]),t._v(\"\\n\")])])]),e(\"p\",[t._v(\"上述例子中，在闭包的帮助下，返回给变量 \"),e(\"code\",[t._v(\"cityOfCustomer\")]),t._v(\" 的内部函数可以访问外部函数 \"),e(\"code\",[t._v(\"findCustomerCity()\")]),t._v(\" 的常量。并且当调用内部函数并传参 name 时，不需要再次实例化这些常量。如果想要对闭包有更多了解，我建议你浏览Prashant的这篇\"),e(\"a\",{attrs:{href:\"https://medium.com/@prashantramnyc/javascript-closures-simplified-d0d23fa06ba4\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"博客\"),e(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_6-最小化-dom-的访问\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-最小化-dom-的访问\"}},[t._v(\"#\")]),t._v(\" 6. 最小化 DOM 的访问\")]),t._v(\" \"),e(\"p\",[t._v(\"与其他 JavaScript 语句相比，访问 DOM 要慢一些。如果你要操作 DOM，从而触发重绘布局，那么操作会变得相当缓慢。\")]),t._v(\" \"),e(\"p\",[t._v(\"要减少访问 DOM 元素的次数，请访问它一次，并将其作为局部变量使用。当需求完成时，确保通过将变量设置为 \"),e(\"code\",[t._v(\"null\")]),t._v(\" 来删除该变量的值。这将防止内存泄漏，因为它允许垃圾回收。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_7-压缩文件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-压缩文件\"}},[t._v(\"#\")]),t._v(\" 7. 压缩文件\")]),t._v(\" \"),e(\"p\",[t._v(\"通过使用诸如 Gzip 之类的压缩方法，可以减小 JavaScript 文件的大小。这些较小的文件将提升网站性能，因为浏览器只需要下载较小的资源。\")]),t._v(\" \"),e(\"p\",[t._v(\"这些压缩可以减少多达 80% 的文件大小。 在这里了解更多关于 \"),e(\"a\",{attrs:{href:\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer#text_compression_with_gzip\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"压缩\"),e(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://cdn-images-1.medium.com/max/10944/0*yUVIcTARWrjWiaPw\",alt:\"\"}})]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_8-缩小你的最终代码\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-缩小你的最终代码\"}},[t._v(\"#\")]),t._v(\" 8. 缩小你的最终代码\")]),t._v(\" \"),e(\"p\",[t._v(\"有些人认为缩小和压缩是一样的。但却相反，它们是不同的。在压缩中，使用特殊的算法来改变输出文件的大小。但在缩小中，需要删除 JavaScript 文件中的注释和额外的空格。这个过程可以在网上找到的许多工具和软件包的帮助下完成。缩小已经成为页面优化的标准实践和前端优化的主要组成部分。\")]),t._v(\" \"),e(\"p\",[t._v(\"缩小可以减少你的文件大小高达 60%。 在这里了解更多关于 \"),e(\"a\",{attrs:{href:\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer#minification_preprocessing_context-specific_optimizations\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"缩小\"),e(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_9-使用节流-throttle-和防抖-debounce\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-使用节流-throttle-和防抖-debounce\"}},[t._v(\"#\")]),t._v(\" 9. 使用节流 throttle 和防抖 debounce\")]),t._v(\" \"),e(\"p\",[t._v(\"通过使用这两种技术，我们可以严格执行代码需要处理事件的次数。\")]),t._v(\" \"),e(\"p\",[t._v(\"节流是指函数在指定时间内被调用的最大次数。例如，“最多每 1000 毫秒执行一次 \"),e(\"code\",[t._v(\"onkeyup\")]),t._v(\" 事件函数”。这意味着如果你每秒输入 20 个键，该事件将每秒只触发一次。这将减少代码的加载。\")]),t._v(\" \"),e(\"p\",[t._v(\"另一方面，防抖是指函数在上次触发后再次触发要间隔的最短时间。换句话说，“仅当经过 600 毫秒而没有调用该函数时才执行该函数”。这将意味着，你的函数将不会被调用，直到 600 毫秒后，最后一次执行相同的函数。要了解更多关于节流和防抖的知识，这里有一个\"),e(\"a\",{attrs:{href:\"https://css-tricks.com/the-difference-between-throttling-and-debouncing/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"快速阅读\"),e(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),e(\"p\",[t._v(\"你可以实现自己的防抖和节流函数，也可以从 \"),e(\"a\",{attrs:{href:\"https://lodash.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Lodash\"),e(\"OutboundLink\")],1),t._v(\" 和 \"),e(\"a\",{attrs:{href:\"http://underscorejs.org/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Underscore\"),e(\"OutboundLink\")],1),t._v(\" 等库导入它们。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_10-避免使用-delete-关键字\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-避免使用-delete-关键字\"}},[t._v(\"#\")]),t._v(\" 10. 避免使用 delete 关键字\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"delete\")]),t._v(\" 关键字用于从对象中删除属性。关于这个 \"),e(\"code\",[t._v(\"delete\")]),t._v(\" 关键字的性能，已经有一些争议。你可以在 \"),e(\"a\",{attrs:{href:\"https://github.com/googleapis/google-api-nodejs-client/issues/375\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"此处\"),e(\"OutboundLink\")],1),t._v(\" 和 [此处](https://stackoverflow.com/questions/43594092/slow-delete-of-object- propertieses-in-js-in-v8/44008788) 中查看它们。这个问题有望在未来的更新中得到解决。\")]),t._v(\" \"),e(\"p\",[t._v(\"As an alternative, you can simply to set the unwanted property as \"),e(\"code\",[t._v(\"undefined\")]),t._v(\".\\n另一种选择是，你可以直接将将不想要的属性设置为 \"),e(\"code\",[t._v(\"undefined\")]),t._v(\"。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" object \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"name\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Jane Doe\"')]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" age\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"43\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nobject\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"age \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"undefined\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),e(\"p\",[t._v(\"你还可以使用 Map 对象，因为根据 \"),e(\"a\",{attrs:{href:\"https://jsperf.com/delete-vs-map-prototype-delete\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Bret\"),e(\"OutboundLink\")],1),t._v(\"，Map 的 \"),e(\"code\",[t._v(\"delete\")]),t._v(\" 方法被认为更快。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_11-使用异步代码防止线程阻塞\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-使用异步代码防止线程阻塞\"}},[t._v(\"#\")]),t._v(\" 11. 使用异步代码防止线程阻塞\")]),t._v(\" \"),e(\"p\",[t._v(\"你应该知道 JavaScript 是同步的，\"),e(\"strong\",[t._v(\"也是单线程的\")]),t._v(\"。但是在某些情况下，可能会花费大量的时间来执行一段代码。在本质上同步意味着，这段代码将阻止其他代码语句的运行，直到它完成执行，这会降低代码的整体性能。\")]),t._v(\" \"),e(\"p\",[t._v(\"但其实，我们可以通过实现异步代码来避免这种情况。异步代码以前是以回调的形式编写的，但是在 ES6 中引入了一种处理异步代码的新风格。这种新风格被称为 promises。你可以在 \"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"MDN 的官方文档\"),e(\"OutboundLink\")],1),t._v(\" 中了解更多关于回调和 promises 的信息。\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"等等…\")])]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"JavaScript默认是同步的，\"),e(\"strong\",[t._v(\"也是单线程的\")]),t._v(\"。\")])]),t._v(\" \"),e(\"p\",[t._v(\"为什么在单一线程上运行，还能运行异步代码？这是很多人感到困惑的地方。这要归功于浏览器外壳下运行的 JavaScript 引擎。JavaScript 引擎是执行 JavaScript 代码的计算机程序或解释器。JavaScript 引擎可以用多种语言编写。例如，支持 Chrome 浏览器的 V8 引擎是用 c++ 编写的，而支持 Firefox 浏览器的 SpiderMonkey 引擎是用 C 和 c++ 编写的。\")]),t._v(\" \"),e(\"p\",[t._v(\"这些 JavaScript 引擎可以在后台处理任务。根据 \"),e(\"a\",{attrs:{href:\"https://dev.to/steelvoltage/if-javascript-is-single-threaded-how-is-it-asynchronous-56gd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Brian\"),e(\"OutboundLink\")],1),t._v(\"，调用栈识别 Web API 的函数，并将它们交给浏览器处理。一旦浏览器处理完成这些任务，它们将返回并作为回调推到堆栈上。\")]),t._v(\" \"),e(\"p\",[t._v(\"你有时可能想知道，Node.js 在没有浏览器帮助的情况下是如何运行的。事实上，为 Chrome 提供动力的 V8 引擎同样也为 Node.js 提供动力。下面是一篇由 Salil 撰写的非常棒的博客文章：\"),e(\"a\",{attrs:{href:\"https://medium.com/better-programming/is-node-js-really-single-threaded-7ea59bcc8d64\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Node.js真的是单线程吗\"),e(\"OutboundLink\")],1),t._v(\"，它解释了节点生态系统上的这个过程。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_12-使用代码分割\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-使用代码分割\"}},[t._v(\"#\")]),t._v(\" 12. 使用代码分割\")]),t._v(\" \"),e(\"p\",[t._v(\"如果你有使用 Google Light House 的经验，你就会熟悉一个叫做“first contentful paint”的度量。它是 Lighthouse 报告的性能部分跟踪的六个指标之一。\")]),t._v(\" \"),e(\"p\",[t._v(\"First Contentful Paint（FCP）测量用户导航到页面后浏览器渲染 DOM 第一个内容所花费的时间。页面上的图像、非白色 \"),e(\"code\",[t._v(\"<canvas>\")]),t._v(\" 元素和 SVG 被认为是 DOM 内容；iframe 中的任何内容都\"),e(\"strong\",[t._v(\"不被包含\")]),t._v(\"在内。\")]),t._v(\" \"),e(\"p\",[t._v(\"获得更高 FCP 分数的最好方法之一是使用代码分割。代码分割是一种在开始时只向用户发送必要模块的技术。减少最初传输的有效内容的大小，会显著地影响 FCP 得分。\")]),t._v(\" \"),e(\"p\",[t._v(\"流行的模块打包工具（如 webpack）提供了代码分割功能。你可以在原生 ES 模块的帮助下，加载各个模块。你可以阅读更多关于原生 ES 模块的 \"),e(\"a\",{attrs:{href:\"https://blog.bitsrc.io/downloading-es-modules-in-javascript-a28fec420f73\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"详细信息\"),e(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_13-使用异步-async-和延迟-defer\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-使用异步-async-和延迟-defer\"}},[t._v(\"#\")]),t._v(\" 13. 使用异步 async 和延迟 defer\")]),t._v(\" \"),e(\"p\",[t._v(\"在现代网站中，脚本比 HTML 更密集，它们的尺寸更大，消耗更多的处理时间。默认情况下，浏览器必须等待脚本下载、执行，然后处理页面的其余部分。\")]),t._v(\" \"),e(\"p\",[t._v(\"庞大的脚本可能会阻塞网页的加载。为了避免这种情况，JavaScript 提供了两种技术，即异步和延迟。你只需将这些属性添加到 \"),e(\"code\",[t._v(\"<script>\")]),t._v(\" 标签。\")]),t._v(\" \"),e(\"p\",[t._v(\"异步是告诉浏览器在不影响页面渲染的情况下加载脚本。换句话说，页面不需要等待异步脚本，内容就会被处理和显示。\")]),t._v(\" \"),e(\"p\",[t._v(\"延迟是在呈现完成后告诉浏览器加载脚本的地方。如果你同时指定了两者，\"),e(\"code\",[t._v(\"async\")]),t._v(\" 在现代浏览器中优先执行，而只支持 \"),e(\"code\",[t._v(\"defer\")]),t._v(\" 但不支持 \"),e(\"code\",[t._v(\"async\")]),t._v(\" 的旧浏览器将退回到 \"),e(\"code\",[t._v(\"defer\")]),t._v(\"。\")]),t._v(\" \"),e(\"p\",[t._v(\"这两个属性可以极大地帮助你减少页面加载时间。强烈建议你阅读一下 Flavio 的 \"),e(\"a\",{attrs:{href:\"https://flaviocopes.com/javascript-async-defer/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"JavaScript-async-defer\"),e(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_14-使用-web-workers-在后台运行-cpu-密集型任务\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_14-使用-web-workers-在后台运行-cpu-密集型任务\"}},[t._v(\"#\")]),t._v(\" 14. 使用 Web Workers 在后台运行 CPU 密集型任务\")]),t._v(\" \"),e(\"p\",[t._v(\"Web Workers 允许在后台线程中运行脚本。如果你有一些高度密集的任务，你可以将任务分配给 web workers, web workers 将运行它们而不干扰用户界面。创建之后，web worker 可以通过向 JavaScript 代码指定的事件处理程序发送消息来与 JavaScript 代码通信。反之亦然。\")]),t._v(\" \"),e(\"p\",[t._v(\"要了解更多关于 web workers 的信息，建议浏览 \"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"MDN 文档\"),e(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"p\",[t._v(\"这篇文章就到这里，欢迎在评论中留言。\")]),t._v(\" \"),e(\"p\",[t._v(\"快乐编码！！\")]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"一些资源\")])]),t._v(\" \"),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"https://nodesource.com/blog/improve-javascript-performance/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Nodesource 的博客\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"li\",[e(\"a\",{attrs:{href:\"https://medium.com/@bretcameron/13-tips-to-write-faster-better-optimized-javascript-dc1f9ab063d8\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Bret Cameron 的博客\"),e(\"OutboundLink\")],1)])]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"如果发现译文存在错误或其他需要改进的地方，欢迎到 \"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"掘金翻译计划\"),e(\"OutboundLink\")],1),t._v(\" 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 \"),e(\"strong\",[t._v(\"本文永久链接\")]),t._v(\" 即为本文在 GitHub 上的 MarkDown 链接。\")])]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"blockquote\",[e(\"p\",[e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"掘金翻译计划\"),e(\"OutboundLink\")],1),t._v(\" 是一个翻译优质互联网技术文章的社区，文章来源为 \"),e(\"a\",{attrs:{href:\"https://juejin.im\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"掘金\"),e(\"OutboundLink\")],1),t._v(\" 上的英文分享文章。内容覆盖 \"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner#android\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Android\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner#ios\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"iOS\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"前端\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"后端\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"区块链\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"产品\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"设计\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"人工智能\"),e(\"OutboundLink\")],1),t._v(\"等领域，想要查看更多优质译文请持续关注 \"),e(\"a\",{attrs:{href:\"https://github.com/xitu/gold-miner\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"掘金翻译计划\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"http://weibo.com/juejinfanyi\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"官方微博\"),e(\"OutboundLink\")],1),t._v(\"、\"),e(\"a\",{attrs:{href:\"https://zhuanlan.zhihu.com/juejinfanyi\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"知乎专栏\"),e(\"OutboundLink\")],1),t._v(\"。\")])])])}),[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}